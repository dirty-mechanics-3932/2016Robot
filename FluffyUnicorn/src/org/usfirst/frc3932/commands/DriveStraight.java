// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3932.commands;

import java.util.Date;

import org.usfirst.frc3932.Robot;
import org.usfirst.frc3932.RobotMap;
import org.usfirst.frc3932.pid.AhrsYawPIDSource;
import org.usfirst.frc3932.pid.DriveSystemReversePIDOutput;
import org.usfirst.frc3932.pid.DriveSystemStraightPIDOutput;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class DriveStraight extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_feet;
	private double m_speed;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private PIDController controller;
	private static final double P = 0.025;
	private static final double I = 0;
	private static final double D = 0;

	private int a0 = 0; // Value of encoders at initialization
	private int b0 = 0; // Value of encoders at initialization
	private double lastD = 0;
	private Date DriveStraightInit;

	public static final double TICKS_PER_FOOT = 1409d; // measured

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveStraight(double feet, double speed) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_feet = feet;
		m_speed = speed;

		//m_feet = 2; // for debugging my home Keith

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveSystem);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		PIDOutput out;
		if (feet < 0) {
			out = new DriveSystemReversePIDOutput(speed);
		} else {
			out = new DriveSystemStraightPIDOutput(speed);
		}
		controller = new PIDController(P, I, D, new AhrsYawPIDSource(), out);
		controller.setInputRange(-180, 180);
		controller.setContinuous();
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		a0 = RobotMap.driveSystemLeftFront.getEncPosition();  // a0,b0 value of left and right encoder at init time.
		b0 = RobotMap.driveSystemRightFront.getEncPosition();
		DriveStraightInit = new Date();
		// controller.disable();
		// Robot.driveSystem.resetEncoders();
		controller.setSetpoint(Robot.ahrs.getYaw());
		System.out.println("DriveStraight init yaw:" + Robot.ahrs.getYaw() + " speed:" + m_speed + " distance:" + m_feet
				+ " L:" + a0 + " R:" + b0);
		controller.enable();
		System.out.println(buildDebugString());

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
	}

	protected double keithGetDistance() {
		double a1 = RobotMap.driveSystemLeftFront.getEncPosition();
		double b1 = RobotMap.driveSystemRightFront.getEncPosition();
		// Ge the delta distance traveled
		return (Math.abs(a0 - a1) + Math.abs(b0 - b1)) / (2 * TICKS_PER_FOOT);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		double d = keithGetDistance();
		if (Math.abs(lastD - d) < .0001) { // Log only if moved 
			System.out.printf("L:%d R:%d Yaw:%.2f Distance:%.2f Time:%d %n",
					RobotMap.driveSystemLeftFront.getEncPosition(), RobotMap.driveSystemRightFront.getEncPosition(),
					Robot.ahrs.getYaw(), d, new Date().getTime() - DriveStraightInit.getTime());
		}
		lastD = d;
		return Math.abs(d) > Math.abs(m_feet);
	}

	// Called once after isFinished returns true
	protected void end() {
		System.out.println(buildDebugString() + " time:" + (new Date().getTime() - DriveStraightInit.getTime()));
		controller.disable();
	}

	private String buildDebugString() {
		return "L:" + RobotMap.driveSystemLeftFront.getEncPosition() + " R:"
				+ RobotMap.driveSystemRightFront.getEncPosition() + " Pitch:" + Robot.ahrs.getPitch() + " Yaw:"
				+ Robot.ahrs.getYaw() + " Roll:" + Robot.ahrs.getRoll() + " Version:" + Robot.ahrs.getFirmwareVersion();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
