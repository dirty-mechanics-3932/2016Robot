// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.command.Command;

import java.util.Date;

import org.usfirst.frc3932.Robot;
import org.usfirst.frc3932.RobotMap;

/**
 *
 */
public class WaitFor extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_time;
	private Date WaitForCreate;
	private double l0 = 0; // Value of encoders at initialization
	private double r0 = 0; // Value of encoders at initialization
	private double lastDistance = 9999;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public WaitFor(double time) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_time = time;
		WaitForCreate = new Date();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		this.setTimeout(m_time);
		l0 = RobotMap.driveSystemLeftFront.getPosition();
		r0 = RobotMap.driveSystemRightFront.getPosition();
		Robot.logf("+++++ WaitFor Initialize time:%.0f Yaw:%.2f L:%.0f R:%.0f%n", m_time, Robot.ahrs.getYaw(), l0, r0);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		double l1 = RobotMap.driveSystemLeftFront.getPosition();
		double r1 = RobotMap.driveSystemRightFront.getPosition();
		double distance = (Math.abs(l0 - l1) + Math.abs(r0 - r1)) / (2 * Robot.conf.ticksPerFoot);
		if (lastDistance != distance) {
			Robot.logf("WaitFor time:%.0f Yaw:%.2f L:%.0f R:%.0f Coast:%.2f%n", m_time, Robot.ahrs.getYaw(), l1, r1,
					distance);
		}
		lastDistance = distance;
		return isTimedOut();
	}

	// Called once after isFinished returns true
	protected void end() {
		double l1 = RobotMap.driveSystemLeftFront.getPosition();
		double r1 = RobotMap.driveSystemRightFront.getPosition();
		double distance = (Math.abs(l0 - l1) + Math.abs(r0 - r1)) / (2 * Robot.conf.ticksPerFoot);
		Robot.logf("----- WaitFor Finished time:%.2f Yaw:%.2f L:%.0f R:%.0f Coast:%.2f Total Time:%.2f%n", m_time,
				Robot.ahrs.getYaw(), l1, r1, distance, (new Date().getTime() - Robot.taskInitTime.getTime()) / 1000d);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
