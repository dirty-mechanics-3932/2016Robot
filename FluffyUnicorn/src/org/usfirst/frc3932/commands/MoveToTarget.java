//MoveToTarget.java// RobotBuilder Version: 2.0
//
//This file was generated by RobotBuilder. It contains sections of
//code that are automatically generated and assigned by robotbuilder.
//These sections will be updated in the future when you export to
//Java from RobotBuilder. Do not put any code or make any change in
//the blocks indicating autogenerated code or it will be lost on an
//update. Deleting the comments indicating the section will prevent
//it from being updated in the future.


package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.command.Command;
import java.util.Date;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


import org.usfirst.frc3932.Robot;

/**
 *
 */
public class MoveToTarget extends Command {

	private static final double CLOSE_ENOUGH = 11.5;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private DriveStraight Move;
	private double distance;
	private double m_timeout = 5;
	private Date m_MoveToInit;
	private double min = 11.1;
	private double max = 12.5;
	
	//private double distance = 0;
	//private double ManualDistance = 15;//enter manual distance here
	//private double FindAngle = 25;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public MoveToTarget() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveSystem);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		//DetectTarget GotTheTarget = new DetectTarget();
		//GotTheTarget.initialize(); 
		//GotTheTarget.execute();
		
		this.setTimeout(m_timeout);
		m_MoveToInit = new Date();
		//Robot.log("MoveToTarget Initialized YAW:" + Robot.ahrs.getYaw() + "Distance:" + Robot.camera.driveDistance);
		//Robot.driveSystem.resetEncoders();
		//FindAngle  cos-1 of adjacent(manual read) of hypotenus (lidar reading)
		//double FindAngle = Math.acos(ManualDistance/Robot.rangefinder.getDistance());
		//double distance = (Robot.rangefinder.getDistance()* Math.cos(Math.toRadians(FindAngle)));
		//double distance = (Robot.rangefinder.getDistance()* Math.cos(Math.toRadians(30)));
		//distance = distance /(2.54*12);
		//distance = Robot.rangefinder.getDistance()/(12*2.54);
		//Robot.log("Robot.rangefinder in Move to target: " + distance);
		SmartDashboard.putNumber("RoboRealmCamera", Robot.camera.driveDistance);
		//	t = new TurnTo(Robot.ahrs.getYaw(),5);
	    distance = Robot.camera.driveDistance;
	    
	    
	    distance = Robot.rangefinder.getDistance()/(12*2.54);
		//distance = distance *Math.cos(Math.toRadians(23));
		//if (Robot.camera.driveDistance <13 && Robot.camera.driveDistance > 2)
		Robot.log("Distance in Move To Target: " + distance);
		
		double magicDistance = 9.76;
		
		if (Math.abs(distance - magicDistance) > .2  && distance > 1  && distance < 18){
		  SmartDashboard.putNumber("Move Distance to:",distance );
		  Move =new DriveStraight(distance - magicDistance, .3);
		  Move.initialize();
		}
		/*if (isTooClose(distance)){
			driveBackward(distance);
			
			}
		else if (isTooFar(distance)){
			driveForward(distance);
			
			
			}*/
		
			
			//Move = new DriveStraight(Robot.camera.driveDistance -12, .5);  // The Adjust on value is 1 foot latter improve.
			//	Robot.log("MoveToTarget Distance:" + Robot.camera.driveDistance
			//	t= new TurnTo(Robot.ahrs.getYaw()+ GotTheTarget.angle -4, 5);
			//Move.initialize();
		}

	
	

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		//	t.execute();
		

	}



	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {

		//Robot.driveSystem.resetEncoders();
	//	if (Move.equals(null)) {
	//	Robot.log("Movetotarget timeout:" + isTimedOut() + " m_timeout:" + m_timeout + " isFinishedWithoutmoving: "
	//			);
	//	return isTimedOut();
	//	}
		
	//	else{
		if (Move != null) {
			boolean done = Move.isFinished();
			boolean timeOut = (new Date().getTime() - m_MoveToInit.getTime()) > 5000;

			//Robot.log("Movetotarget timeout:" + timeOut + " m_timeout:" + m_timeout + " isFinished: " + done);
			return done || timeOut;
		} else if ((new Date().getTime() - m_MoveToInit.getTime()) > 400)
			return true;
		else
			return false;
	}
	//}

	// Called once after isFinished returns true
	protected void end() {
		Robot.log("MoveToTarget is Ended");
		if (Move != null){
	//	else{
		//	distance = 0;
		
		Move.end();
		}
	}
		
		
	//}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		if (Move !=null){
	//	else{
			//distance = 0;
		Move.interrupted();
		}
	}
}
