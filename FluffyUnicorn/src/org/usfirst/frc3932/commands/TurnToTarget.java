// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.Date;

import org.usfirst.frc3932.Robot;

/**
 *
 */
public class TurnToTarget extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private TurnToOrig turnTo;
	private double m_timeout;
	private static Vision vision;
	private Date turnToTarget;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public TurnToTarget(Double timeout) {
		m_timeout = timeout;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveSystem);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		turnToTarget = new Date();
		vision = Robot.vision;
		vision.getTarget();
		double yaw = Robot.ahrs.getYaw();
		Robot.logf("TurntoTarget YAW:%.2f Vision Angle:%.2f%n", yaw, vision.angle);
		turnTo = new TurnToOrig(yaw + vision.angle, 5);
		turnTo.initialize();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		double elaspedTime = new Date().getTime() - turnToTarget.getTime();
		boolean done = turnTo.isFinished();
		return done || elaspedTime > (m_timeout * 1000);
	}

	// Called once after isFinished returns true
	protected void end() {
		turnTo.end();
		vision = Robot.vision;
		vision.getTarget();
		Robot.logf("TurntoTarget is Finished vision angle:%,2f", vision.angle);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
