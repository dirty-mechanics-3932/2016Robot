// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932;

import org.usfirst.frc3932.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3932.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand())Robot.shooterWheels.off();;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton cameraToggleButton;
    public JoystickButton platformTiltToggleButton;
    public JoystickButton shootFeed;
    public JoystickButton shootLaunch;
    public JoystickButton shootButton;
    public Joystick driverLeft;
    public JoystickButton camera11Button;
    public JoystickButton camera12Button;
    public JoystickButton camera21Button;
    public JoystickButton setEqualToJoy1;
    public JoystickButton cameraSwitchButton;
    public Joystick driverRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverRight = new Joystick(1);
        
        cameraSwitchButton = new JoystickButton(driverRight, 2);
        cameraSwitchButton.whenPressed(new CameraSwitch());
        setEqualToJoy1 = new JoystickButton(driverRight, 1);
        setEqualToJoy1.whileHeld(new goForward());
        camera21Button = new JoystickButton(driverRight, 5);
        camera21Button.whenPressed(new Camera21());
        camera12Button = new JoystickButton(driverRight, 4);
        camera12Button.whenPressed(new Camera12());
        camera11Button = new JoystickButton(driverRight, 3);
        camera11Button.whenPressed(new Camera11());
        driverLeft = new Joystick(0);
        
        shootButton = new JoystickButton(driverLeft, 3);
        shootButton.whenPressed(new ActivateCannon());
        shootLaunch = new JoystickButton(driverLeft, 6);
        shootLaunch.whileHeld(new ShooterOut());
        shootFeed = new JoystickButton(driverLeft, 5);
        shootFeed.whileHeld(new ShooterFeed());
        platformTiltToggleButton = new JoystickButton(driverLeft, 4);
        platformTiltToggleButton.whenPressed(new PlatformTiltToggle());
        cameraToggleButton = new JoystickButton(driverLeft, 1);
        cameraToggleButton.whenPressed(new CameraToggle());


        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        setEqualToJoy1.whenReleased(new returnToNormal());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverLeft() {
        return driverLeft;
    }

    public Joystick getDriverRight() {
        return driverRight;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

